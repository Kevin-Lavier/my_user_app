require 'sqlite3'

class User
  DB_FILENAME = 'db.sql'

  # 📌 Make attributes accessible
  attr_reader :id, :firstname, :lastname, :age, :password, :email

  # 📌 Constructor for the User class
  def initialize(id, firstname, lastname, age, password, email)
    @id = id
    @firstname = firstname
    @lastname = lastname
    @age = age
    @password = password
    @email = email
  end

  # 📌 Method to initialize the database
  def self.init_db
    db = SQLite3::Database.new(DB_FILENAME)
    db.execute <<-SQL
      CREATE TABLE IF NOT EXISTS users (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        firstname TEXT,
        lastname TEXT,
        age INTEGER,
        password TEXT,
        email TEXT
      );
    SQL
    db.close
  end

  # 📌 Method to create a user and return a User object
  def self.create(firstname:, lastname:, age:, password:, email:)
    self.init_db

    db = SQLite3::Database.new(DB_FILENAME)
    db.execute("INSERT INTO users (firstname, lastname, age, password, email) VALUES (?, ?, ?, ?, ?)", 
               [firstname, lastname, age, password, email])

    # 📌 Retrieve the ID generated by SQLite
    user_id = db.last_insert_row_id
    db.close

    # 📌 Return a User object with the inserted data
    User.new(user_id, firstname, lastname, age, password, email)
  end

  # 📌 Method to find a user by ID and return a User object
  def self.find(id)
    self.init_db
    db = SQLite3::Database.new(DB_FILENAME)
    db.results_as_hash = true
    result = db.execute("SELECT * FROM users WHERE id = ?", [id]).first
    db.close

    return nil if result.nil?

    # 📌 Return a User object with the retrieved data
    User.new(result["id"], result["firstname"], result["lastname"], result["age"], result["password"], result["email"])
  end

  # 📌 Method to get all users (returns an array of User objects)
  def self.all
    self.init_db
    db = SQLite3::Database.new(DB_FILENAME)
    db.results_as_hash = true
    results = db.execute("SELECT * FROM users")
    db.close

    # 📌 Convert each entry into a User object
    results.map { |row| User.new(row["id"], row["firstname"], row["lastname"], row["age"], row["password"], row["email"]) }
  end

  # 📌 Method to update a user and return the modified object
  def self.update(id, attribute, value)
    self.init_db
    db = SQLite3::Database.new(DB_FILENAME)

    # 📌 Prevent SQL injection by validating the attribute name
    valid_attributes = ["firstname", "lastname", "age", "password", "email"]
    unless valid_attributes.include?(attribute.to_s)
      puts "❌ Error: The attribute '#{attribute}' is not valid."
      return nil
    end

    # 📌 Update a single field at a time
    db.execute("UPDATE users SET #{attribute} = ? WHERE id = ?", [value, id])
    db.close

    # 📌 Return the updated user
    self.find(id)
  end

  # 📌 Method to delete a user by ID
  def self.destroy(id)
    self.init_db
    db = SQLite3::Database.new(DB_FILENAME)
    db.execute("DELETE FROM users WHERE id = ?", [id])
    db.close
  end

  # 📌 Method to delete all users
  def self.destroy_all
    self.init_db
    db = SQLite3::Database.new(DB_FILENAME)
    db.execute("DELETE FROM users")
    db.close
  end
end

